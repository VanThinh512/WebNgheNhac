@model TunePhere.Models.Album


@{
    ViewData["Title"] = "Chi tiết album";
    Layout = "_Layout";
}

<div class="album-detail">
    <div class="album-header">
        <div class="album-info">
            <img src="@Model.ImageUrl" alt="@Model.AlbumName" class="album-cover">
            <div class="album-meta">
                <h1>@Model.AlbumName</h1>
                <div class="artist-info">
                    <img src="@Model.Artists.ImageUrl" alt="@Model.Artists.ArtistName" class="artist-avatar">
                    <a href="/Search/Artist/@Model.Artists.ArtistId" class="artist-name">@Model.Artists.ArtistName</a>
                </div>
                <div class="album-stats">
                    <span class="songs-count">@Model.Songs.Count bài hát</span>
                    <span class="separator">•</span>
                    <span class="duration">@Model.Time.ToString(@"hh\:mm\:ss")</span>
                    <span class="separator">•</span>
                    <span class="release-date">@Model.ReleaseDate</span>
                </div>
                @if (!string.IsNullOrEmpty(Model.AlbumDescription))
                {
                    <p class="album-description">@Model.AlbumDescription</p>
                }
            </div>
        </div>
    </div>

    <div class="songs-section">
        <h2>Danh sách bài hát</h2>
        <div class="songs-list">
            @foreach (var song in Model.Songs)
            {
                <div class="song-item" data-song-id="@song.SongId" data-song-url="@song.FileUrl" data-song-title="@song.Title" data-song-artist="@song.Artists.ArtistName" data-song-image="@song.ImageUrl">
                    <div class="song-number">
                        <span class="number">@(Model.Songs.ToList().IndexOf(song) + 1)</span>
                        <i class="fas fa-play play-icon"></i>
                        <i class="fas fa-pause pause-icon"></i>
                    </div>
                    <div class="song-image">
                        @if (!string.IsNullOrEmpty(song.ImageUrl))
                        {
                            <img src="@song.ImageUrl" alt="@song.Title" />
                        }
                        else
                        {
                            <div class="default-song-image">
                                <i class="fas fa-music"></i>
                            </div>
                        }
                    </div>
                    <div class="song-info">
                        <h3>@song.Title</h3>
                        <div class="song-meta">
                            <span class="genre">@song.Genre</span>
                            <span class="separator">•</span>
                            <span class="duration">@song.Duration.ToString(@"mm\:ss")</span>
                        </div>
                    </div>
                    <div class="song-stats">
                        <span class="play-count" title="Lượt nghe">
                            <i class="fas fa-play"></i>
                            @song.PlayCount
                        </span>
                        <span class="like-count" title="Lượt thích">
                            <i class="fas fa-heart"></i>
                            @song.LikeCount
                        </span>
                    </div>
                    <div class="song-actions">
                        <button class="btn-add-playlist" title="Thêm vào playlist" onclick="openPlaylistModal('@song.SongId')">
                            <i class="fas fa-plus"></i>
                        </button>
                        <button class="btn-like @(song.IsLiked ? "active" : "")" title="Yêu thích" onclick="toggleLike('@song.SongId')">
                            <i class="@(song.IsLiked ? "fas" : "far") fa-heart"></i>
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal thêm vào playlist -->
<div class="modal fade" id="playlistModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Thêm vào playlist</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="playlist-list">
                    <!-- Danh sách playlist sẽ được thêm bằng JavaScript -->
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .album-detail {
        background: #121212;
        min-height: 100vh;
        color: white;
        padding-top: 64px;
    }

    .album-header {
        background: linear-gradient(to bottom, #1DB954, #121212);
        padding: 4rem 2rem 2rem;
        margin-bottom: 2rem;
    }

    .album-info {
        max-width: 1200px;
        margin: 0 auto;
        display: flex;
        gap: 2rem;
    }

    .album-cover {
        width: 300px;
        height: 300px;
        border-radius: 8px;
        box-shadow: 0 4px 60px rgba(0,0,0,.5);
    }

    .album-meta {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
    }

        .album-meta h1 {
            font-size: 4rem;
            font-weight: 900;
            margin-bottom: 1rem;
            text-shadow: 0 2px 4px rgba(0,0,0,.3);
        }

    .artist-info {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .artist-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
    }

    .artist-name {
        color: white;
        text-decoration: none;
        font-weight: 600;
        transition: color 0.3s ease;
    }

        .artist-name:hover {
            color: #1DB954;
        }

    .album-stats {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: rgba(255,255,255,0.7);
        font-size: 0.9rem;
        margin-bottom: 1rem;
    }

    .separator {
        color: rgba(255,255,255,0.3);
    }

    .album-description {
        color: rgba(255,255,255,0.7);
        font-size: 1rem;
        line-height: 1.6;
        max-width: 800px;
    }

    .songs-section {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
    }

        .songs-section h2 {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
        }

    .songs-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .song-item {
        display: flex;
        align-items: center;
        padding: 0.75rem;
        border-radius: 4px;
        transition: all 0.3s ease;
        background: rgba(255,255,255,0.03);
    }

        .song-item:hover {
            background: rgba(255,255,255,0.1);
            transform: translateY(-2px);
        }

    .song-number {
        width: 40px;
        text-align: center;
        color: rgba(255,255,255,0.7);
        font-size: 1rem;
    }

    .song-item:hover .number {
        display: none;
    }

    .song-item:hover .play-icon {
        display: block;
    }

    .play-icon, .pause-icon {
        display: none;
        cursor: pointer;
        color: white;
    }

    .song-item.playing .number,
    .song-item.playing .play-icon {
        display: none;
    }

    .song-item.playing .pause-icon {
        display: block;
        color: #1DB954;
    }

    .song-image {
        width: 50px;
        height: 50px;
        margin: 0 1rem;
        border-radius: 4px;
        overflow: hidden;
        box-shadow: 0 4px 60px rgba(0,0,0,.5);
    }

        .song-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .default-song-image {
        width: 100%;
        height: 100%;
        background: rgba(255,255,255,0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        color: rgba(255,255,255,0.3);
        font-size: 1.5rem;
    }

    .song-info {
        flex: 1;
        min-width: 0;
        margin-right: 2rem;
    }

        .song-info h3 {
            color: white;
            margin: 0;
            font-size: 1rem;
            font-weight: 500;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

    .song-meta {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: rgba(255,255,255,0.7);
        font-size: 0.9rem;
        margin-top: 0.25rem;
    }

    .song-stats {
        display: flex;
        gap: 1.5rem;
        margin-right: 2rem;
        color: rgba(255,255,255,0.7);
        font-size: 0.9rem;
    }

        .song-stats span {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .song-stats i {
            font-size: 0.8rem;
        }

    .song-actions {
        display: flex;
        gap: 1rem;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .song-item:hover .song-actions {
        opacity: 1;
    }

    .song-actions button {
        background: none;
        border: none;
        color: rgba(255,255,255,0.7);
        font-size: 1.1rem;
        padding: 0.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .song-actions button:hover {
            color: white;
            transform: scale(1.1);
        }

    .song-actions .btn-like.active {
        color: #1DB954;
    }

    /* Modal styles */
    .modal-content {
        background: #282828;
        color: white;
        border-radius: 8px;
    }

    .modal-header {
        border-bottom: 1px solid rgba(255,255,255,0.1);
        padding: 1.5rem;
    }

    .modal-title {
        color: white;
        font-weight: 600;
    }

    .btn-close {
        color: white;
        opacity: 0.7;
        transition: opacity 0.3s ease;
    }

        .btn-close:hover {
            opacity: 1;
        }

    .modal-body {
        padding: 1.5rem;
    }

    .playlist-list {
        max-height: 400px;
        overflow-y: auto;
    }

    .playlist-item {
        display: flex;
        align-items: center;
        padding: 0.75rem;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .playlist-item:hover {
            background: rgba(255,255,255,0.1);
        }

        .playlist-item img {
            width: 40px;
            height: 40px;
            border-radius: 4px;
            margin-right: 1rem;
        }

        .playlist-item span {
            color: white;
            font-size: 0.9rem;
        }

    @@media (max-width: 768px) {
        .album-header {
            padding: 3rem 1rem 1.5rem;
        }

        .album-info {
            flex-direction: column;
            gap: 1rem;
        }

        .album-cover {
            width: 200px;
            height: 200px;
            margin: 0 auto;
        }

        .album-meta h1 {
            font-size: 2rem;
        }

        .songs-section {
            padding: 0 1rem;
        }

        .song-item {
            padding: 0.5rem;
        }

        .song-image {
            width: 40px;
            height: 40px;
        }

        .song-info {
            margin-right: 1rem;
        }

        .song-meta {
            flex-wrap: wrap;
        }

        .song-stats {
            display: none;
        }

        .song-actions {
            opacity: 1;
        }
    }
</style>

<script>
    let currentAudio = null;
    let currentSongItem = null;

    function playAudio(songItem) {
        const songUrl = songItem.dataset.songUrl;
        const songId = songItem.dataset.songId;

        // Nếu đang phát bài hát khác, dừng lại
        if (currentAudio && currentSongItem) {
            currentAudio.pause();
            currentSongItem.classList.remove('playing');
        }

        // Nếu click vào bài hát đang phát, dừng lại
        if (currentSongItem === songItem) {
            currentAudio = null;
            currentSongItem = null;
            return;
        }

        // Phát bài hát mới
        const audio = new Audio(songUrl);
        audio.play();

        songItem.classList.add('playing');
        currentAudio = audio;
        currentSongItem = songItem;

        // Cập nhật lượt nghe
        updatePlayCount(songId);

        // Xử lý khi phát xong
        audio.onended = function() {
            songItem.classList.remove('playing');
            currentAudio = null;
            currentSongItem = null;
        };
    }

    function updatePlayCount(songId) {
        fetch(`/api/songs/${songId}/play`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
    }

    function openPlaylistModal(songId) {
        // Lấy danh sách playlist của user
        fetch('/api/playlists/user')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const playlistList = document.querySelector('.playlist-list');
                    playlistList.innerHTML = data.playlists.map(playlist => `
                        <div class="playlist-item" onclick="addToPlaylist('${songId}', '${playlist.id}')">
                            <img src="${playlist.imageUrl}" alt="${playlist.name}">
                            <span>${playlist.name}</span>
                        </div>
                    `).join('');

                    const modal = new bootstrap.Modal(document.getElementById('playlistModal'));
                    modal.show();
                }
            });
    }

    function addToPlaylist(songId, playlistId) {
        fetch('/api/playlists/add-song', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                songId: songId,
                playlistId: playlistId
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Đóng modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('playlistModal'));
                modal.hide();

                // Hiển thị thông báo thành công
                alert('Đã thêm bài hát vào playlist');
            }
        });
    }

    function toggleLike(songId) {
        fetch(`/Search/Like`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ songId: songId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const likeButton = document.querySelector(`.song-item[data-song-id="${songId}"] .btn-like`);
                const likeIcon = likeButton.querySelector('i');
                const likeCount = document.querySelector(`.song-item[data-song-id="${songId}"] .like-count`);

                likeButton.classList.toggle('active');
                likeIcon.classList.toggle('far');
                likeIcon.classList.toggle('fas');

                // Cập nhật số lượt thích
                const currentCount = parseInt(likeCount.textContent);
                likeCount.textContent = data.isLiked ? currentCount + 1 : currentCount - 1;
            } else {
                alert(data.message || 'Có lỗi xảy ra khi thực hiện thao tác này');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Có lỗi xảy ra khi thực hiện thao tác này');
        });
    }

    // Thêm sự kiện click cho số thứ tự và icon play
    document.querySelectorAll('.song-number').forEach(number => {
        number.addEventListener('click', function() {
            const songItem = this.closest('.song-item');
            playAudio(songItem);
        });
    });

</script> 